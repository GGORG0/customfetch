.\" It was automatically generated by help2man 1.49.3 at the beggining
.TH CUSTOMFETCH "1" "August 2024" "customfetch @VERSION@ branch @BRANCH@" "User Commands"
.SH NAME
customfetch \- A command\-line and GUI system information tool (or neofetch like program), which its focus point is customizability and perfomance
.SH SYNOPSIS
.B cufetch
[\fI\,OPTION\/\fR]...
.SH OPTIONS
.TP
\fB\-n\fR, \fB\-\-no\-display\fR
Do not display the ascii art
.TP
\fB\-s\fR, \fB\-\-source\-path\fR <path>
Path to the ascii art file to display
.TP
\fB\-C\fR, \fB\-\-config\fR <path>
Path to the config file to use
.TP
\fB\-D\fR, \fB\-\-data\-dir\fR <path>
Path to the data dir where we'll taking the distros ascii arts (must contain subdirectory called "ascii")
.TP
\fB\-d\fR, \fB\-\-distro\fR <name>
Print a custom distro logo (must be the same name, uppercase or lowercase, e.g "windows 11" or "ArCh")
.TP
\fB\-f\fR, \fB\-\-font\fR <name>
The font to be used in GUI mode (syntax must be "[FAMILY\-LIST] [STYLE\-OPTIONS] [SIZE]" without the square brackets [])
.br
An example: "[Liberation Mono] [Normal] [12]", which can be "Liberation Mono Normal 12"
.TP
\fB\-g\fR, \fB\-\-gui\fR
Use GUI mode instead of priting in the terminal (use \fB\-V\fR to check if it's enabled)
.TP
\fB\-o\fR, \fB\-\-offset\fR <num>
Offset between the ascii art and the system infos
.TP
\fB\-l\fR. \fB\-\-list\-modules\fR
Print the list of the components and its members
.TP
\fB\-h\fR, \fB\-\-help\fR
Print this help menu
.TP
\fB\-L\fR, \fB\-\-logo\-only\fR
Print only the logo
.TP
\fB\-V\fR, \fB\-\-version\fR
Print the version along with the git branch it was built
.TP
\fB\-\-bg\-image\fR <path>
Path to image to be used in the background in GUI (put "disable" for disabling in the config)
.TP
\fB\-\-logo\-padding\-top\fR
Padding of the logo from the top
.TP
\fB\-\-gen\-config\fR [<path>]
Generate default config file to config folder (if path, it will generate to the path)
.br
Will ask for confirmation if file exists already
.SH CONFIGURATION
customfetch is a command\-line and GUI system information tool (or "neofetch like program"). It's focus point is being customizable and fast at the same time.
.PP
How does it work?
.PP
We got the config.toml file, in there we got an array variable called "layout". That's the variable where you customize how the infos should be displayed.
.br
You have 3 components: $<module.submod>, ${color}, $(bash command). They can be used in the ascii art text file and layout, but how to use them?
.PP
Here's a simple bare-minimal example:
.br
layout = [
.br
	"My OS is $<os.name>, and username is $<user.name>",
.br
	"The color of the following text will be ${red}red",
.br
	"And this is a $(echo \\"bash command\\")"
.br
]
.PP
The \fBInfo component $<>\fR let's you print a part of a module. All the modules and their parts are listed in the `--list-modules` argument
.PP
The \fBColor component ${}\fR is used for printing the text of a certain color.
.br
The colors can be: \fIblack\fR, \fIred\fR, \fIgreen\fR, \fIblue\fR, \fIcyan\fR, \fIyellow\fR, \fImagenta\fR, \fIwhite\fR and they can be configured in the config file.
.br
These can have hexcodes colors, e.g "#5522dd" or "!#888eed" for bold color text
.br
OR They can have ANSI escape codes, e.g "\\e[1;31m" and "\\e[38;5;160m" (\fBNOTE\fR: 256 colors ANSI escape codes, those that have \\e[38 or \\e[48, can't be used in GUI)
.br
You can also use them inside the component, like ${!#343345} or ${\\e[1;31m}.
.PP
To reset colors use ${0} or ${1} for reset and bold text.
.br
To instead use the colors that the ascii art logo uses, use ${auto} for getting the 1st color, ${auto4} for the 4th one and so on.   
.PP
The \fBBash command component $()\fR speaks for itself. It can execute normal bash commands.
.PP
To escape any $ or bracket, just use \\
.SH BUGS
\fR
Report any bugs to \fIhttps://github.com/Toni500github/customfetch/issues\fR
